[user]
	name = vandemjh
	email = jack@jackv.dev
[merge]
    tool = meld
[alias]
	# List aliases
	aliases = "config --get-regexp alias"
	d = "diff"
	s = "status -s"
	a = "add"
	
	# Short for 'commit all', -v is verbose, helps write commit msg
	ca = "commit -av"
	c = "commit -v"
	co = "checkout"
	p = "push"
	b = "branch"
	root = "rev-parse --show-toplevel"
	diff-files = "diff --name-only"
	ignore = "!gi() { if test -f ${GIT_PREFIX:-.}$1; then echo \"${GIT_PREFIX:-.}$1\" >> .gitignore && echo \"${GIT_PREFIX:-.}$1 added to gitignore\"; else curl -sL https://www.gitignore.io/api/$@ >> .gitignore; echo gitignore cURLed; fi }; gi"
	last = "log -1 HEAD"
	
	# Executes from the git root
	exec = "!exec "

	# Useful to not show changes to frequently changed files
	mute = "!f() { cd ${GIT_PREFIX:-.} && git update-index --assume-unchanged $1; }; f"
	unmute = "!f() { cd ${GIT_PREFIX:-.} && git update-index --no-assume-unchanged $1; }; f"
	# Show all muted files
	muted = "!git ls-files -v | grep ^[a-z]"

	# Commits all changed files with the datetime
	quick-commit = "!f() { git status -s; git commit -am \"$(date +'%A %D at %I:%M%p')\" > /dev/null; }; f"
	# Undos the last commit or the last $1 commits
	undo = "!f() { if [ -z \"$1\" ]; then git reset --soft HEAD~1; else git reset --soft HEAD~$1; fi; }; f"

	# Stop notifying about files I do not want to track
	do-not-track = "!f() { for arg in $@; do echo ${GIT_PREFIX}$arg >> .git/info/exclude; done; }; f"
	do-track = "!f() { for arg in $@; do grep -v ${GIT_PREFIX}$arg .git/info/exclude > temp && mv temp .git/info/exclude; done; }; f"

	commit-it = "!f() { cd ${GIT_PREFIX:-.} && git commit $(find . -type f -iname $1); }; f"

	# Coppies the prettierrc file
	cp-prettier = "!f() { cp -n ~/.prettierrc $(git rev-parse --show-toplevel); git add $(git rev-parse --show-toplevel)/.prettierrc; git commit $(git rev-parse --show-toplevel)/.prettierrc -m 'Added prettier configuration'; }; f"

	# Find commits by commit message
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# List contributors with number of commits.
	contributors = "shortlog --summary --numbered"
	# Amend the currently staged files to the latest commit.
	amend = "commit --amend --reuse-message=HEAD"
	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

[init]
	defaultBranch = "main"

[branch]
	# Show most recently changed branches first.
	sort = -committerdate

[help]
	# Automatically correct and execute mistyped commands.
	autocorrect = 1
	
[branch "master"]
	pushRemote = no_push
[branch "main"]
	pushRemote = no_push
[branch "dev"]
	remote = origin
[branch "jack"]
	remote = origin
